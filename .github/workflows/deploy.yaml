name: Build-and-Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND_LATEST: ghcr.io/enock97/freelancercrm-backend:latest
  IMAGE_FRONTEND_LATEST: ghcr.io/enock97/freelancercrm-frontend:latest
  KUBE_NAMESPACE: freelancercrm

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Generate short SHA tag
        id: vars
        run: echo "sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND_LATEST }}
            ghcr.io/enock97/freelancercrm-backend:${{ steps.vars.outputs.sha }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND_LATEST }}
            ghcr.io/enock97/freelancercrm-frontend:${{ steps.vars.outputs.sha }}

  deploy:
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create KinD cluster
        uses: engineerd/setup-kind@v0.6.2
        with:
          version: v0.24.0

      - name: Pull & load images into KinD
        run: |
          docker pull ${{ env.IMAGE_BACKEND_LATEST }}
          docker pull ${{ env.IMAGE_FRONTEND_LATEST }}
          kind load docker-image ${{ env.IMAGE_BACKEND_LATEST }}
          kind load docker-image ${{ env.IMAGE_FRONTEND_LATEST }}

      - name: Create Kubernetes Secrets
        env:
          POSTGRES_USER:     ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB:       ${{ secrets.POSTGRES_DB }}
          KUBE_NAMESPACE:    ${{ env.KUBE_NAMESPACE }}
        run: |
          # ensure namespace exists
          kubectl create namespace "$KUBE_NAMESPACE" --dry-run=client -o yaml \
            | kubectl apply -f -
          # Postgres creds
          kubectl create secret generic pg-secret \
            --from-literal=POSTGRES_USER="$POSTGRES_USER" \
            --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            --from-literal=POSTGRES_DB="$POSTGRES_DB" \
            --namespace="$KUBE_NAMESPACE"
          # GHCR pull-secret
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.REGISTRY_TOKEN }}" \
            --namespace="$KUBE_NAMESPACE"

      - name: Deploy & debug
        run: |
          # 1) Apply all manifests
          kubectl apply -f k8s/

          # 2) Dump pod state
          echo "=== PODS ==="
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }}

          # 3) Describe backend pod
          echo "=== DESCRIBE BACKEND POD ==="
          kubectl describe pod -l app=backend -n ${{ env.KUBE_NAMESPACE }}

          # 4) Show backend logs
          echo "=== BACKEND LOGS ==="
          kubectl logs -l app=backend -n ${{ env.KUBE_NAMESPACE }}

      - name: Wait for Postgres rollout
        run: |
          kubectl rollout status statefulset/postgres \
            -n ${{ env.KUBE_NAMESPACE }} --timeout=120s

      - name: Wait for Backend rollout
        run: |
          kubectl rollout status deployment/backend \
            -n ${{ env.KUBE_NAMESPACE }} --timeout=120s

      - name: Wait for Frontend rollout
        run: |
          kubectl rollout status deployment/frontend \
            -n ${{ env.KUBE_NAMESPACE }} --timeout=120s